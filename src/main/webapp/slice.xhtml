<?xml version="1.0" encoding="UTF-8"?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui" xmlns:jsf="http://xmlns.jcp.org/jsf">

	<h:form id="slice">	
		<p:remoteCommand name="initSlice" action="#{slicePage.init}" 
			process="@this" update="@form" oncomplete="initOutline()" />
			
		<h:inputHidden id="excerptStart" value="#{sliceData.begin}" />
		<h:inputHidden id="excerptEnd" value="#{sliceData.end}" />
		<h:inputHidden id="excerptThreshold" value="#{partData.excerptLimit}" readonly="#{true}" />
		<h:inputHidden id="excerptSegments" value="#{partData.segments}" readonly="#{true}" />
		<h:inputHidden id="excerptQuota" value="#{partData.quota}" readonly="#{true}" />
		<div jsf:rendered="#{sharedData.multiPartCorpus}">
			<h:inputHidden id="globalSegments" value="#{corpusData.segments}" readonly="#{true}" />
			<h:inputHidden id="globalThreshold" value="#{corpusData.excerptLimit}" readonly="#{true}" />
			<h:inputHidden id="globalQuota" value="#{corpusData.quota}" readonly="#{true}" />
			<!-- <h:inputHidden id="globalUsed" value="#{sliceData.globalUsed}" readonly="#{true}" />
			<h:inputHidden id="globalExcerpt" value="#{sliceData.globalExcerpt}" readonly="#{true}" /> -->
		</div>
				
		<p:panel>
			<f:facet name="header">
				<h:outputText value="#{bundle['slice.selectedCorpus']}" 
					rendered="#{sharedData.multiPartCorpus}" 
					style="margin-right: 5em" />
				<ui:include src="/select_corpus.xhtml">
					<ui:param name="limited" value="true" />
					<ui:param name="ajaxUpdate" value="sliceOutline" />
					<ui:param name="changeHandler" value="#{slicePage}" />
					<ui:param name="handlerMethod" value="selectionChanged" />
				</ui:include>
				
			</f:facet>
			
			<p:outputPanel id="sliceOutline" layout="block">				
				<div class="outline-box">
					<h:outputText id="excerptSegmentsText" style="margin-bottom: 2em" 
						value="#{bundle['slice.excerptBegin']} #{sliceData.begin} #{bundle['slice.excerptEnd']} #{sliceData.end}" />
					<p:slider widgetVar="excerptSegmentsSelect" for="excerptStart,excerptEnd" 
						display="excerptSegmentsText" onSlide="updateExcerpt(event, ui);" 
						styleClass="excerpt-select" range="true" displayTemplate="#{bundle['slice.excerptBegin']} {min} #{bundle['slice.excerptEnd']} {max}" 
						minValue="1" maxValue="#{partData.segments}" />    
					
					<h:outputLabel for="excerptSize" value="#{bundle['excerptSize']}: " />
					<h:outputText id="excerptSize" style="margin-top: 2em" 
						value="#{sliceData.length}/#{partData.segments}" /> 
					<br/>
					<h:outputLabel for="excerptPercent" value="#{bundle['excerptPercent']}: " />
					<h:outputText id="excerptPercent" style="margin-top: 2em" 
						value="#{String.format('%.1f', sliceData.length / partData.segments * 100.0)}%" />
					<br/>
					
					<ui:include src="/outline.xhtml">
						<ui:param name="canvasId" value="outline" />
						<ui:param name="canvasClass" value="excerpt-outline stack-top" />
						<ui:param name="showLegend" value="false" />
					</ui:include>
					
					<!-- 
				
					<h:outputText value="#{bundle['slice.completeExcerpt']}: " />
					<h:outputText id="globalSize" style="margin-top: 2em" 
						value="#{sliceData.globalUsed}/#{sliceData.globalSegments}" /> 
					<h:outputText id="globalPercent" style="margin-top: 2em" 
						rendered="#{slicePage.showGlobalQuota}" />
					<br/>
					<h:outputLabel for="totalPercent" value="#{bundle['totalPercent']}: " 
						rendered="#{slicePage.showQuota}" />
					<h:outputText id="totalPercent" style="margin-top: 2em" 
						rendered="#{slicePage.showQuota}" />
					<br/>
					<ui:include src="/outline.xhtml">
						<ui:param name="canvasId" value="globalOutline" />
						<ui:param name="canvasClass" value="excerpt-outline stack-bottom" />
						<ui:param name="showLegend" value="true" />
					</ui:include>
					 -->
				</div>
			</p:outputPanel>
		
			<f:facet name="footer">
	        	<p:messages id="navMsg" for="navMsgs" showSummary="true" showDetail="false" redisplay="false" />
				<p:commandButton value="#{bundle['back']}" action="#{slicePage.back}" process="@this" />
				<p:commandButton widgetVar="wv_continue" value="#{bundle['continue']}" 
					action="#{slicePage.next}" update="navMsg" />
			</f:facet>
		</p:panel>
	</h:form>
				
	<h:outputScript library="js" name="xsample-common.js" target="body" />
	<h:outputScript library="js" name="xsample-slice.js" target="body" />
	<h:outputScript >	

		var quota = [];
		var globalQuota = [];
		
		function updateExcerpt(_, ui) {
			var begin = ui.values[0];
			var end = ui.values[1];
			refreshOutline(begin, end);
		}
		
		function refreshOutline(begin, end) {
			var count = end - begin + 1;
			var segments = Number(document.getElementById('slice:excerptSegments').value);
			var percent = count / segments * 100.0;
			var limit = Number(document.getElementById('slice:excerptThreshold').value);
			var canvas = document.getElementById('outline');
			var excerpt = [toFragment(begin, end)];
			var used = combinedSize(quota, excerpt, limit);
			var exceeded = used>limit;
			var style = exceeded ? OUTLINE_EXCEEDED : OUTLINE_EXCERPT;
		
			paintExcerpt(canvas, quota, excerpt, segments, style);	
			
			document.getElementById('slice:excerptSize').textContent = count + "/" + segments;
			document.getElementById('slice:excerptPercent').textContent = percent.toFixed(1) + "%";
			if(quota.length>0) {				
				var totalPercent = used / segments * 100.0;
				document.getElementById('slice:totalPercent').textContent = totalPercent.toFixed(1) + "%";
			}
			if(exceeded) {
				PF('wv_continue').disable();
			} else {
				PF('wv_continue').enable();
			}
		}
		
		function initOutline() {	
			var canvas = document.getElementById('outline');				
			if(canvas == null) return;
				
			resizeCanvas(canvas);
						
			quota = parseFragments(document.getElementById('slice:excerptQuota').value);
			//console.log(quota);
			
			var begin = Number(document.getElementById('slice:excerptStart').value);
			var end = Number(document.getElementById('slice:excerptEnd').value);
			refreshOutline(begin, end);
		}
		
		function initGlobalOutline() {		
			var canvas = document.getElementById('globalOutline');				
			if(canvas == null) return;
			
			resizeCanvas(canvas);
						
			globalQuota = parseFragments(document.getElementById('slice:globalQuota').value);					
			var excerpt = parseFragments(document.getElementById('slice:globalExcerpt').value);
						
			var segments = Number(document.getElementById('slice:globalSegments').value);
			var limit = Number(document.getElementById('slice:globalThreshold').value);
		
			paintExcerpt(canvas, quota, excerpt, segments, OUTLINE_EXCERPT);	
				
			if(quota.length>0) {			
				var used = combinedSize(quota, excerpt, limit);	
				var totalPercent = used / segments * 100.0;
				document.getElementById('slice:globalPercent').textContent = totalPercent.toFixed(1) + "%";
			}
		}

		$('document').ready(function(){
			initSlice();
		});
	</h:outputScript>
</ui:composition>