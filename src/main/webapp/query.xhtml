<?xml version="1.0" encoding="UTF-8"?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui" xmlns:jsf="http://xmlns.jcp.org/jsf">
	
	<h:form id="query">
		<p:remoteCommand name="initQuery" action="#{queryPage.init}"
			process="@this" update="@form" oncomplete="initOutline();" />
			
		<h:inputHidden id="excerptStart" value="#{queryData.begin}" />
		<h:inputHidden id="excerptEnd" value="#{queryData.end}" />
		<h:inputHidden id="excerptThreshold" value="#{queryData.limit}" readonly="#{true}" />
		<h:inputHidden id="excerptSegments" value="#{queryData.segments}" readonly="#{true}" />
		<h:inputHidden id="excerptQuota" value="#{queryData.quota}" readonly="#{true}" />
		 
		<h:inputHidden id="globalSegments" value="#{queryData.globalSegments}" readonly="#{true}" />
		<h:inputHidden id="globalThreshold" value="#{queryData.globalLimit}" readonly="#{true}" />
		<h:inputHidden id="globalUsed" value="#{queryData.globalUsed}" readonly="#{true}" />
		<h:inputHidden id="globalExcerpt" value="#{queryData.globalExcerpt}" readonly="#{true}" />
		<h:inputHidden id="globalQuota" value="#{queryData.globalQuota}" readonly="#{true}" />
			
		<h:inputHidden id="resultHits" value="#{queryData.resultHits}" readonly="#{true}" />
		<h:inputHidden id="resultSegments" value="#{queryData.resultSegments}" readonly="#{true}" />
		
		<div jsf:rendered="#{xsampleExcerptData.multiPartCorpus}">
			<h:outputText value="#{bundle['query.multiPartInfo']}" />
			<br/>
			<p:selectManyMenu value="#{queryView.selectedParts}"
                          converter="corpusConverter"  var="part" filter="true"
                          filterMatchMode="contains" showCheckbox="true" 
                          styleClass="manymenu-advanced" scrollHeight="200">
         				<f:selectItems value="#{xsampleExcerptData.manifest.allParts}" 
         					var="part" itemLabel="#{part.title}" itemValue="#{part}"/>
				<p:column>
	                <h:outputText value="#{part.id}"/>
	            </p:column>
				<p:column>
	                <h:outputText value="#{part.title}"/>
	            </p:column>
			</p:selectManyMenu>
		</div>
		<div>
			<p:textEditor widgetVar="editor" height="150" placeholder="#{bundle['query.editor.placeholder']}"
					value="#{queryView.query}" secure="true" required="true">
				<f:facet name="toolbar">
					<span class="ql-formats">
						There be cool stuff for customizing queries...
						<!-- leave toolbar empty for now -->
					</span>
				</f:facet>
			</p:textEditor>
		</div>
		<div>
			<p:messages for="queryMsgs" id="queryMsg" closable="true" redisplay="false" skipDetailIfEqualsSummary="true" />
			<p:commandButton value="#{bundle['query.runQuery']}" action="#{queryPage.runQuery}"
					update="resultRange resultHits resultSegments queryMsg slice" 
					oncomplete="updateAllOutlines()" />
		</div>
		<div jsf:id="slice">
			<div jsf:rendered="#{queryData.hasResults}" class="outline-box">
				
				<h:outputText value="#{bundle['query.rawHits']}:" />
				<ui:include src="/outline.xhtml">
					<ui:param name="canvasId" value="result" />
					<ui:param name="canvasClass" value="excerpt-outline stack-intermediate" />
					<ui:param name="showLegend" value="false" />
				</ui:include>
				
				<h:outputText value="#{bundle['query.mappedHits']}:" />
				<ui:include src="/outline.xhtml">
					<ui:param name="canvasId" value="outline" />
					<ui:param name="canvasClass" value="excerpt-outline stack-intermediate" />
					<ui:param name="showLegend" value="false" />
				</ui:include>
				
				<h:inputHidden id="sliceStart" value="#{queryData.begin}" />
				<h:inputHidden id="sliceEnd" value="#{queryData.end}" />
				
				<h:outputText value="#{bundle['query.sliceInfo']}:" />
				<br/>
				<h:outputText id="sliceRangeText"
					value="#{bundle['query.sliceBegin']} #{queryData.begin} #{bundle['query.sliceEnd']} #{queryData.end}" />
				<p:slider widgetVar="sliceRangeSelect" for="sliceStart,sliceEnd" 
					display="sliceRangeText" onSlide="updateSlice(event, ui);" 
					styleClass="excerpt-select" range="true" displayTemplate="#{bundle['query.sliceBegin']} {min} #{bundle['query.sliceEnd']} {max}" 
					minValue="1" maxValue="#{queryData.range}" />    
				
				<h:outputLabel for="excerptSize" value="#{bundle['excerptSize']}: " />
				<h:outputText id="excerptSize" value="#{queryData.size}" /> 
				<br/>
				<h:outputLabel for="excerptPercent" value="#{bundle['excerptPercent']}: " />
				<h:outputText id="excerptPercent" value="#{queryData.percent}%" />
				<br/>
				<h:outputLabel for="totalPercent" value="#{bundle['totalPercent']}: " 
					rendered="#{queryPage.showQuota}" />
				<h:outputText id="totalPercent" rendered="#{queryPage.showQuota}" />
				<br/>
				
				<ui:include src="/outline.xhtml">
					<ui:param name="canvasId" value="excerpt" />
					<ui:param name="canvasClass" value="excerpt-outline stack-intermediate" />
					<ui:param name="showLegend" value="true" />
				</ui:include>
			</div>
		</div>
		<div>
        	<p:messages id="navMsg" showSummary="true" showDetail="false" redisplay="false" />
			<p:commandButton value="#{bundle['back']}" action="#{queryPage.back}" process="@this" />
			<p:commandButton widgetVar="wv_continue" value="#{bundle['continue']}" 
				action="#{queryPage.next}" update="navMsg" />
		</div>
	</h:form>

				
	<h:outputScript library="js" name="xsample-common.js" target="body" />
	<h:outputScript library="js" name="xsample-slice.js" target="body" />
	<h:outputScript>	
		var matches = [];
		var quota = [];
		
		/** Called when user uses the "slice" slider */
		function updateSlice(_, ui) {
			var begin = ui.values[0];
			var end = ui.values[1];
			updateSlice0(begin, end);
		}
		
		function updateSlice0(begin, end) {
			var range = Number(document.getElementById('query:excerptRange').value);
			var limit = Number(document.getElementById('query:excerptThreshold').value);
			var slice = [toFragment(begin, end)];
			var excerpt = intersect(slice, matches);
			//console.log(excerpt);
			var count = fragmentsSize(excerpt);
			var percent = (count / range * 100.0).toFixed(1);
			var used = combinedSize(quota, excerpt, limit);
			var exceeded = used>limit;
			var style = exceeded ? OUTLINE_EXCEEDED : OUTLINE_EXCERPT;
		
			var canvas = document.getElementById('excerpt');
			paintExcerpt(canvas, true, quota, excerpt, range, style);	
			
			document.getElementById('query:excerptSize').textContent = count;
			document.getElementById('query:excerptPercent').textContent = percent + "%";
			if(quota.length>0) {				
				var totalPercent = (used / range * 100.0).toFixed(1);
				document.getElementById('query:totalPercent').textContent = totalPercent + "%";
			}
			if(exceeded) {
				PF('wv_continue').disable();
			} else {
				PF('wv_continue').enable();
			}
		}
		
		/** Called after search finished */
		function updateAllOutlines() {
			updateResults();
			updateOutline();
			updateExcerpt();
			
			//TODO update the final excerpt outline!!
			
			PF('wv_continue').disable();
		}
		
		function updateExcerpt() {	
			var canvas = document.getElementById('excerpt');
			if(canvas == null) {
				PF('wv_continue').disable();
				return;
			} else {
				resizeCanvas(canvas);	
			}
			
			var slider = PF('sliceRangeSelect');
			var values = slider.getValues();
			
			updateSlice0(values[0], values[1]);
		}
		
		function updateResults() {	
			var canvas = document.getElementById('result');
			if(canvas == null) {
				PF('wv_continue').disable();
				return;
			} else {
				resizeCanvas(canvas);	
			}
			
			var encodedResults = document.getElementById('query:resultHits').value;	
			var hits = parseFragments(encodedResults);
			//console.log(hits);
			
			var range = Number(document.getElementById('query:resultRange').value);
		
			paintExcerpt(canvas, true, [], hits, range, OUTLINE_MATCHES);	
		}
		
		function updateOutline() {	
			var canvas = document.getElementById('outline');
			if(canvas == null) {
				PF('wv_continue').disable();
				return;
			} else {
				resizeCanvas(canvas);	
			}
			
			var encodedSegments = document.getElementById('query:resultSegments').value;	
			matches = parseFragments(encodedSegments);
			//console.log(matches);
			
			var range = Number(document.getElementById('query:excerptRange').value);
		
			paintExcerpt(canvas, true, [], matches, range, OUTLINE_MATCHES);	
		}
		
		function initOutline() {							
			var encodedQuota = document.getElementById('query:excerptQuota').value;			
			quota = parseFragments(encodedQuota);
			//console.log(quota);
			updateResults();
			updateOutline();
			updateExcerpt();
		}
		
		$('document').ready(function(){
			initQuery();
		});
	</h:outputScript>
</ui:composition>