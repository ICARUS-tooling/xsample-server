
plugins {	
    id 'com.github.hierynomus.license' version '0.16.1'
	id 'com.bmuschko.cargo' version '2.7.1'
    id 'maven-publish'
}

apply plugin: 'java-library'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

description = 'XSample server for provisioning excerpts from protected corpora.'
group = 'de.unistuttgart.xsample'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8
	
// Gradle Wrapper
wrapper { 
	// to upgrade wrapper: ./gradlew wrapper --distribution-type bin --gradle-version <version>
	gradleVersion = "7.3.3" 
}

// Configuration for the Payara deployment tasks
def deploymentFile = new File('deployment.ini')
def deploymentConfig = new Properties()
if(deploymentFile.exists()) {
	deploymentFile.withReader('UTF-8') { deploymentConfig.load(it) }
}

repositories { 
    mavenLocal()
    mavenCentral()
}

dependencies {

	providedCompile group: 'jakarta.platform', name: 'jakarta.jakartaee-api', version: '8.0.0'

	// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

	// https://mvnrepository.com/artifact/javax.enterprise/cdi-api
	//providedCompile group: 'javax.enterprise', name: 'cdi-api', version: '2.0.SP1'
	
	// https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa
	implementation group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: '2.7.7'
	
	
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	//implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
	//implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.30'
	
	// https://github.com/swordapp/JavaClient2.0
	//TODO actually not needed for directly fetching data? 
	//implementation group: 'com.github.swordapp', name: 'JavaClient2.0', version: 'master-SNAPSHOT'
	
	// HTTP communication with Dataverse API
	// https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
	implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'
	// https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-gson
	implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.9.0'
	
	// PDF reading and manipulation
	// https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
	implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.21'
	
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: '30.0-jre'
	
  	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	
	// Collection implementations for primitive types
	// https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
	implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.2'
	
	// https://mvnrepository.com/artifact/com.sun.faces/jsf-api
	//compile group: 'com.sun.faces', name: 'jsf-api', version: '2.2.20'
	// https://mvnrepository.com/artifact/com.sun.faces/jsf-impl
	//compile group: 'com.sun.faces', name: 'jsf-impl', version: '2.2.20'
	// https://mvnrepository.com/artifact/org.primefaces/primefaces
	implementation group: 'org.primefaces', name: 'primefaces', version: '10.0.0-RC1'
	implementation group: 'org.primefaces.extensions', name: 'resources-ckeditor', version: '10.0.0-RC1'
	// https://mvnrepository.com/artifact/org.omnifaces/omnifaces
	implementation group: 'org.omnifaces', name: 'omnifaces', version: '3.10.1'
	// https://mvnrepository.com/artifact/org.webjars/font-awesome
	implementation group: 'org.webjars', name: 'font-awesome', version: '5.14.0'
	// https://mvnrepository.com/artifact/org.primefaces.themes/all-themes
	//compile group: 'org.primefaces.themes', name: 'all-themes', version: '1.0.10'	
	
	// https://mvnrepository.com/artifact/javax.faces/javax.faces-api
	// providedCompile group: 'javax.faces', name: 'javax.faces-api', version: '2.3'
	
	// https://mvnrepository.com/artifact/com.googlecode.owasp-java-html-sanitizer/owasp-java-html-sanitizer
	implementation group: 'com.googlecode.owasp-java-html-sanitizer', name: 'owasp-java-html-sanitizer', version: 'r136'
	
	
	// DEPLOYMENT

	// https://mvnrepository.com/artifact/org.glassfish.main.deployment/deployment-client
	cargo group: 'org.glassfish.main.deployment', name: 'deployment-client', version: '5.1.0'

	// https://mvnrepository.com/artifact/org.codehaus.cargo/cargo-ant
	cargo group: 'org.codehaus.cargo', name: 'cargo-ant', version: '1.9.1'

	// TESTING	

	// https://mvnrepository.com/artifact/org.codehaus.cargo/cargo-ant
	// see https://blog.payara.fish/deploying-to-payara-server-using-gradle
	testImplementation group: 'org.codehaus.cargo', name: 'cargo-ant', version: '1.8.2'


	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
	testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0'
	// https://mvnrepository.com/artifact/org.assertj/assertj-core
	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.17.2'
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.5.13'

}

eclipse {
    wtp {
        facet {
            facet name: "java", version: "1.8"          // Java version
            facet name: "jst.web", version: "4.0"       // Dynamic Web Application
            facet name: "jst.jsf", version: "2.3"       // Java Server Faces
            facet name: "wst.jsdt.web", version: "1.0"  // JavaScript
            facet name: "jpt.jpa", version:"2.0"  		// Java Persistence API
        }
    }
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.fork = true
}

cargo {
    // Configures which commands require a built artifact
    cargoRunLocal.dependsOn war
    cargoStartLocal.dependsOn war
    cargoDeployRemote.dependsOn war
    cargoRedeployRemote.dependsOn war
    cargoRedeployLocal.dependsOn war
     
    containerId = 'glassfish5x'
     
    // Define deploy artifact properties
    deployable {
        context = "/xsample"
    }
     
    // Only necessary for local commands
    local {
        homeDir = file(deploymentConfig.payaraHome ?: '.')
    }
     
    // Only necessary for remote commands
    remote {
        hostname = deploymentConfig.payaraHostname
        username = deploymentConfig.payaraUsername
        password = deploymentConfig.payaraPassword
        containerProperties {
            // this is necessary only to pass blank password correctly to the cargo deployer because of a bug in the cargo gradle plugin
            property 'cargo.remote.password', deploymentConfig.payaraPassword
        }
    }
}

// License formatting for file headers
license {
	ext.year = '2020-'+Calendar.getInstance().get(Calendar.YEAR)
	ext.name = 'Markus GÃ¤rtner'
	ext.email = 'markus.gaertner@ims.uni-stuttgart.de'
	
	header = rootProject.file('LICENSE_HEADER')
	encoding = "UTF-8"
	
	includes(["**/*.java"])
	
	// pakage-info.java already has a documentation header, don't need conflicts here!
	excludes(["**/generated-src/**", "**/package-info.java"])
	
	mapping {
		// Per default the plugin uses full 'JAVADOC_STYLE' for license headers.
		// We prefer normal multiline comment style to distinguish it from the
		// documentation after package and import statements.
		java = 'SLASHSTAR_STYLE'
	}
	
	ignoreFailures = false
	useDefaultMappings = true
	dryRun = false
	strictCheck = true
}

task createAppInfo(type: WriteProperties) {

	comment = 'Static XSample application info generated by build script'
	outputFile = rootProject.file("src/main/resources/META-INF/app.properties")
	properties = [
		"version" : project.version
	]
}

processResources.dependsOn createAppInfo